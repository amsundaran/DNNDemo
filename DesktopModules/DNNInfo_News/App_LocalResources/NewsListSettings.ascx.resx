<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ControlTitle_settings.Text" xml:space="preserve">
    <value>News List Settings</value>
  </data>
  <data name="lblTemplates.Help" xml:space="preserve">
    <value>This will be the template available under Control Panel &gt; News Templates</value>
  </data>
  <data name="lblTemplates.Text" xml:space="preserve">
    <value>News Templates</value>
  </data>
  <data name="lblTemplateNote.Text" xml:space="preserve">
    <value>These templates can be created under Control Panel &gt;News Templates</value>
  </data>
  <data name="lblSearchResult.Help" xml:space="preserve">
    <value>By default the system will automatically allocate the tab id of the News/Article Page, if you want to specify the tab id, you may enter the tab id value here. </value>
  </data>
  <data name="lblSearchResult.Text" xml:space="preserve">
    <value>News TabID</value>
  </data>
  <data name="ModuleFriendlyName.Text" xml:space="preserve">
    <value>Module Friendly Name</value>
  </data>
  <data name="TabId.Text" xml:space="preserve">
    <value>Tab ID</value>
  </data>
  <data name="TabName.Text" xml:space="preserve">
    <value>Tab Name</value>
  </data>
  <data name="AddedDate.Text" xml:space="preserve">
    <value>Added Date</value>
  </data>
  <data name="Asc.Text" xml:space="preserve">
    <value>Asc</value>
  </data>
  <data name="Desc.Text" xml:space="preserve">
    <value>Desc</value>
  </data>
  <data name="lblNoNewsMessage.Help" xml:space="preserve">
    <value>This message will be displayed if there are no articles found</value>
  </data>
  <data name="lblNoNewsMessage.Text" xml:space="preserve">
    <value>No Articles Message</value>
  </data>
  <data name="lblNoOfPaging.Help" xml:space="preserve">
    <value>Set the number of link paging. If value is 0 will be reset to 10</value>
  </data>
  <data name="lblNoOfPaging.Text" xml:space="preserve">
    <value>No of Paging</value>
  </data>
  <data name="lblNoOfRecords.Help" xml:space="preserve">
    <value>Set the number of articles to be displayed. If value is 0 will be reset to 10</value>
  </data>
  <data name="lblNoOfRecords.Text" xml:space="preserve">
    <value>No of Articles</value>
  </data>
  <data name="lblSortField.Help" xml:space="preserve">
    <value>You can sort the news by available sort field</value>
  </data>
  <data name="lblSortField.Text" xml:space="preserve">
    <value>Sort Field</value>
  </data>
  <data name="lblSortOrder.Help" xml:space="preserve">
    <value>You can sort the news by ascending or descending order</value>
  </data>
  <data name="lblSortOrder.Text" xml:space="preserve">
    <value>Sort Order</value>
  </data>
  <data name="NewsID.Text" xml:space="preserve">
    <value>NewsID</value>
  </data>
  <data name="NoNewsMessage.Text" xml:space="preserve">
    <value>There are no articles found</value>
  </data>
  <data name="NoOfComments.Text" xml:space="preserve">
    <value>No of Comments</value>
  </data>
  <data name="NoOfViews.Text" xml:space="preserve">
    <value>No of Views</value>
  </data>
  <data name="PublishedDate.Text" xml:space="preserve">
    <value>Published Date</value>
  </data>
  <data name="Title.Text" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="UpdatedDate.Text" xml:space="preserve">
    <value>Updated Date</value>
  </data>
  <data name="IgnorePageIndexQueryStringNote.Text" xml:space="preserve">
    <value>Note: This will ignore the query string 'p'. By default this is unticked, because it used for news paging. For ex: if you have 100 articles and you show 10 articles per page. You will have 10 page paging.</value>
  </data>
  <data name="lblHidePagingBottom.Help" xml:space="preserve">
    <value>Tick this will hide the paging link bottom</value>
  </data>
  <data name="lblHidePagingBottom.Text" xml:space="preserve">
    <value>Hide Paging Bottom</value>
  </data>
  <data name="lblHidePagingTop.Help" xml:space="preserve">
    <value>Tick this will hide the paging link top</value>
  </data>
  <data name="lblHidePagingTop.Text" xml:space="preserve">
    <value>Hide Paging Top</value>
  </data>
  <data name="lblIgnorePageIndexQueryString.Help" xml:space="preserve">
    <value>Note: This will ignore the query string 'p'. By default this is unticked, because it used for news paging. For ex: if you have 100 articles and you show 10 articles per page. You will have 10 page paging.</value>
  </data>
  <data name="lblIgnorePageIndexQueryString.Text" xml:space="preserve">
    <value>Ignore Page Index Query String</value>
  </data>
  <data name="lblHeaderText.Help" xml:space="preserve">
    <value>This header text will appear on the above of news list</value>
  </data>
  <data name="lblHeaderText.Text" xml:space="preserve">
    <value>Header Text</value>
  </data>
  <data name="lblShowByCategories.Help" xml:space="preserve">
    <value>You can show news/articles by specifiying the specific ticked categories</value>
  </data>
  <data name="lblShowByCategories.Text" xml:space="preserve">
    <value>Show News/Articles by ticked categories only</value>
  </data>
</root>