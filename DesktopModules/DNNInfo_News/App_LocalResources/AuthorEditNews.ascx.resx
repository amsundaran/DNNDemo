<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnAdd.Text" xml:space="preserve">
    <value>Save</value>
  </data>
  <data name="btnCancel.Text" xml:space="preserve">
    <value>Cancel</value>
  </data>
  <data name="btnUpload.Text" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="btnUploadAdditional.Text" xml:space="preserve">
    <value>Upload</value>
  </data>
  <data name="CategoryRequired.Text" xml:space="preserve">
    <value>Category is required</value>
  </data>
  <data name="DeleteImageConfirm.Text" xml:space="preserve">
    <value>Are you sure you want to delete this?</value>
  </data>
  <data name="DeleteImageLink.Text" xml:space="preserve">
    <value>Delete Image</value>
  </data>
  <data name="DescriptionRequired.Text" xml:space="preserve">
    <value>Description is required</value>
  </data>
  <data name="InvalidArchivedDate.Text" xml:space="preserve">
    <value>Invalid archived date. ex: 20 Jan 2012</value>
  </data>
  <data name="InvalidExpiredDate.Text" xml:space="preserve">
    <value>Invalid expired date. ex: 20 Jan 2012</value>
  </data>
  <data name="InvalidPublishedDate.Text" xml:space="preserve">
    <value>Invalid published date. ex: 20 Jan 2012</value>
  </data>
  <data name="lblActive.Text" xml:space="preserve">
    <value>Active</value>
  </data>
  <data name="lblAdditionalImage.Text" xml:space="preserve">
    <value>Additional Images</value>
  </data>
  <data name="lblArchived.Text" xml:space="preserve">
    <value>Archived</value>
  </data>
  <data name="lblArchivedDate.Text" xml:space="preserve">
    <value>Archived Date</value>
  </data>
  <data name="lblAuthorID.Text" xml:space="preserve">
    <value>Author ID</value>
  </data>
  <data name="lblCategories.Text" xml:space="preserve">
    <value>Categories</value>
  </data>
  <data name="lblDescription.Text" xml:space="preserve">
    <value>Description</value>
  </data>
  <data name="lblExpiredDate.Text" xml:space="preserve">
    <value>Expired Date</value>
  </data>
  <data name="lblFeatured.Text" xml:space="preserve">
    <value>Featured</value>
  </data>
  <data name="lblKeyword.Text" xml:space="preserve">
    <value>Keyword</value>
  </data>
  <data name="lblMainImage.Text" xml:space="preserve">
    <value>Main Image</value>
  </data>
  <data name="lblMetaDescription.Text" xml:space="preserve">
    <value>Meta Description (SEO)</value>
  </data>
  <data name="lblMetaKeyword.Text" xml:space="preserve">
    <value>Meta Keyword (SEO)</value>
  </data>
  <data name="lblMetaTitle.Text" xml:space="preserve">
    <value>Meta Title (SEO)</value>
  </data>
  <data name="lblNewArticle.Text" xml:space="preserve">
    <value>Add News/Article</value>
  </data>
  <data name="lblPublished.Text" xml:space="preserve">
    <value>Published</value>
  </data>
  <data name="lblPublishedDate.Text" xml:space="preserve">
    <value>Published Date</value>
  </data>
  <data name="lblShortDescription.Text" xml:space="preserve">
    <value>Short Description / Summary</value>
  </data>
  <data name="lblTitle.Text" xml:space="preserve">
    <value>Title</value>
  </data>
  <data name="lblYouTubes.Text" xml:space="preserve">
    <value>Youtube Videos</value>
  </data>
  <data name="linkDelete.Text" xml:space="preserve">
    <value>Delete</value>
  </data>
  <data name="linkDeleteImage.Text" xml:space="preserve">
    <value>Delete Image</value>
  </data>
  <data name="litSortIndex.Text" xml:space="preserve">
    <value>Sort Index</value>
  </data>
  <data name="MaximumUploadSize.Text" xml:space="preserve">
    <value>Maximum size upload is</value>
  </data>
  <data name="regexPublishedTime.Text" xml:space="preserve">
    <value>hh:mm ex: 23:15 or 11:45</value>
  </data>
  <data name="regexUserID.Text" xml:space="preserve">
    <value>Invalid author/user id ex: 1</value>
  </data>
  <data name="reqDescription.Text" xml:space="preserve">
    <value>( * required)</value>
  </data>
  <data name="reqPublishedDate.Text" xml:space="preserve">
    <value>( * required)</value>
  </data>
  <data name="reqPublishedTime.Text" xml:space="preserve">
    <value>( * required)</value>
  </data>
  <data name="reqShortDescription.Text" xml:space="preserve">
    <value>( * required)</value>
  </data>
  <data name="reqTitle.Text" xml:space="preserve">
    <value>( * required)</value>
  </data>
  <data name="reqUserID.Text" xml:space="preserve">
    <value>( * required)</value>
  </data>
  <data name="ShortDescriptionRequired.Text" xml:space="preserve">
    <value>Short description is required</value>
  </data>
  <data name="UploadValidImage.Text" xml:space="preserve">
    <value>Please upload a valid image (only jpg, jpeg, gif, and png is allowed)</value>
  </data>
  <data name="lblEditArticle.Text" xml:space="preserve">
    <value>Edit News/Article</value>
  </data>
  <data name="btnUpdate.Text" xml:space="preserve">
    <value>Update</value>
  </data>
  <data name="btnUpdateReturn.Text" xml:space="preserve">
    <value>Update and Return</value>
  </data>
  <data name="NewsUpdated.Text" xml:space="preserve">
    <value>The news has been updated</value>
  </data>
  <data name="lblNewsURL.Text" xml:space="preserve">
    <value>News URL</value>
  </data>
  <data name="lblNewsURLNote.Text" xml:space="preserve">
    <value>You can specify the news url here. Tokens like [$NEWSID] and [$TABID] will be replaced  in here.</value>
  </data>
  <data name="AccessDenied.Text" xml:space="preserve">
    <value>Sorry, you are not authorized to edit this article.</value>
  </data>
  <data name="KeywordNote.Text" xml:space="preserve">
    <value>Separate the keyword by coma for ex: car, house</value>
  </data>
  <data name="AdditionalImagesDisabledNote.Text" xml:space="preserve">
    <value>The number of images upload allowance has been reached</value>
  </data>
  <data name="AuthorOtherNameNote.Text" xml:space="preserve">
    <value>By default, the author name display will be based on your user account information details, but you can specify your alternative name in here. If it is empty, it will use the default user information</value>
  </data>
  <data name="lblAuthorOtherName.Text" xml:space="preserve">
    <value>Author Name</value>
  </data>
  <data name="litAdditionalImagesNote.Text" xml:space="preserve">
    <value>You can upload up to [$NOOFIMAGES] image(s).</value>
  </data>
</root>